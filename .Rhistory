colnames(toreturn) <- c("", "")
}
check_demographic_parity(dat)
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided")
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p > 0.05)")
toreturn <- cbind(colnames(dat)[3:ncol(dat)], sig)
colnames(toreturn) <- c("", "")
return(toreturn)
}
check_demographic_parity(dat)
dat <- uds_dat
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided")
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- cbind(colnames(dat)[3:ncol(dat)], sig)
colnames(toreturn) <- c("", "")
return(toreturn)
}
check_demographic_parity(dat)
runApp('app')
runApp('app')
check_demographic_parity(uds_dat)
runApp('app')
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided")
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- cbind(colnames(dat)[3:ncol(dat)], sig)
colnames(toreturn) <- c("", "")
return(as.data.frame(toreturn))
}
runApp('app')
check_demographic_parity(uds_dat)
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided")
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- as.data.frame(cbind(colnames(dat)[3:ncol(dat)], sig))
colnames(toreturn) <- c("", "")
return(toreturn)
}
runApp('app')
runApp('app')
check_demographic_parity(uds_dat)
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided")
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- as.data.frame(cbind(colnames(dat)[3:ncol(dat)], sig))
colnames(toreturn) <- c("", "")
return(toreturn)
suppressWarnings()
}
check_demographic_parity(uds_dat)
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- as.data.frame(cbind(colnames(dat)[3:ncol(dat)], sig))
colnames(toreturn) <- c("", "")
return(toreturn)
}
check_demographic_parity(uds_dat)
runApp('app')
runApp('app')
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame("" = colnames(dat)[3:ncol(dat)], "" = sig)
#colnames(toreturn) <- c("", "")
return(toreturn)
}
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame(cbind(colnames(dat)[3:ncol(dat)], sig))
colnames(toreturn) <- c("", "")
return(toreturn)
}
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Demographic Parity Relative to Previous Step (p < 0.05)", "Passes Demographic Parity Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame(cbind(colnames(dat)[3:ncol(dat)], sig))
colnames(toreturn) <- c("", "")
return(toreturn)
}
runApp('app')
head(uds_dat)
datatable(check_demographic_parity(uds_dat))
uds_dat <- read.csv("../uds_dat.csv")
colnames(uds_dat) <- gsub("\\.", " ", colnames(uds_dat))
datatable(check_demographic_parity(uds_dat))
datatable(check_demographic_parity(uds_dat))
check_demographic_parity(uds_dat)
datatable(check_demographic_parity(uds_dat))
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Relative to Previous Step (p < 0.05)", "Passes Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame("Step" = colnames(dat)[3:ncol(dat)], "Demographic Parity" = sig)
return(toreturn)
}
datatable(check_demographic_parity(uds_dat))
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Relative to Previous Step (p < 0.05)", "Passes Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame("Step" = colnames(dat)[3:ncol(dat)], "Demographic\nParity" = sig)
return(toreturn)
}
datatable(check_demographic_parity(uds_dat))
runApp('app')
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Relative to Previous Step (p < 0.05)", "Passes Relative to Previous Step (p >= 0.05)")
toreturn <- data.frame("Step" = colnames(dat)[3:ncol(dat)], "Demographic Parity" = sig)
return(toreturn)
}
runApp('app')
uds_dat
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
gsub("\\.", " ", "he.llo")
test <- data.frame("step" = c(1,2), "Dem Parity" = c(1,2))
test
test <- data.frame(c(1,2), c(1,2))
test
colnames(test) <- c("step", "dem par")
test
check_demographic_parity <- function(dat){
pvals <- rep(NA, ncol(dat) - 2)
for(i in 3:ncol(dat)){
d2 <- dat[dat[,i] > 0,]
suppressWarnings(p <- prop.test(x = d2[,i], n = d2[,i-1], alternative = "two.sided"))
pvals[i-2] <- p$p.value
}
sig <- ifelse(pvals < 0.05, "Fails Relative to Previous Step", "Passes Relative to Previous Step")
toreturn <- data.frame(colnames(dat)[3:ncol(dat)], sig)
colnames(toreturn) <- c("Step", "Demographic Parity")
return(toreturn)
}
runApp('app')
runApp('app')
runApp('app')
dat <- read.csv("fairlabs_data.csv")
dat$num_pos <- rep(NA, nrow(dat))
for(i in 1:nrow(dat)){
dat$num_pos[i] <- sum(dat[i,9:54], na.rm = TRUE)
}
ds <- dat %>%
select(mother_id, maternal_race, maternal_age,
uds_collection_date, detected_tetrahydrocannabinol,
num_pos, cps_reporting_date)
dim(ds)
length(unique(dat$mother_id)) #6528
dsf %>% group_by(maternal_age) %>%
summarise(pos = sum(tested)/n()) %>%
ggplot(data = ., aes(x = maternal_age, y = pos)) + geom_line()
dsf <- filter(ds, maternal_race %in% c("White", "Black or African American", "Asian", "Other Pacific Islander", "American Indian or Alaska Native")) %>%
#select one row per mother, but if they were ever screened, select that row
arrange(desc(tested)) %>%
group_by(mother_id) %>%
filter(row_number() == 1) %>%
filter(maternal_age < 50)
ds <- dat %>%
select(mother_id, maternal_race, maternal_age,
uds_collection_date, detected_tetrahydrocannabinol,
num_pos, cps_reporting_date)
nrow(ds) ## 6643
length(unique(dat$mother_id)) #6528
table(ds$uds_collection_date == "")
ds$tested <- ifelse(ds$uds_collection_date == "", FALSE, TRUE)
ds %>% group_by(maternal_race) %>%
summarise(pct_tested = sum(tested)/n(), count = n()) %>%
arrange(desc(count))
# Filter out "other" and mixed race categories to start; while these are critical, sample size is smaller and it will be less straightforward to assess for implicit bias
dsf <- filter(ds, maternal_race %in% c("White", "Black or African American", "Asian", "Other Pacific Islander", "American Indian or Alaska Native")) %>%
#select one row per mother, but if they were ever screened, select that row
arrange(desc(tested)) %>%
group_by(mother_id) %>%
filter(row_number() == 1) %>%
filter(maternal_age < 50)
model <- glm(data = dsf, tested ~ maternal_race + maternal_age)
summary(model)
# Estimate Std. Error t value Pr(>|t|)
# (Intercept)                             0.1680939  0.0565256   2.974  0.00295 **
# maternal_raceAsian                     -0.0639663  0.0566950  -1.128  0.25926
# maternal_raceBlack or African American  0.0667733  0.0540058   1.236  0.21635
# maternal_raceOther Pacific Islander    -0.0170488  0.0670680  -0.254  0.79935
# maternal_raceWhite                     -0.0089774  0.0540109  -0.166  0.86799
# maternal_age                           -0.0028083  0.0006424  -4.372 1.25e-05 ***
### highly dependent on maternal age
## need to test for collinearity between race and age
tapply(dsf$maternal_age, dsf$maternal_race,
function(x) format(summary(x)))
# $`American Indian or Alaska Native`
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# "20.00" "24.00" "27.00" "27.48" "30.00" "37.00"
# $Asian
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# "17.00" "30.00" "33.00" "32.27" "35.00" "47.00"
# $`Black or African American`
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# "12.00" "23.00" "27.00" "27.59" "32.00" "49.00"
# $`Other Pacific Islander`
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# "18.00" "24.00" "30.00" "29.64" "34.50" "43.00"
# $White
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# "14.00" "26.00" "30.00" "30.03" "34.00" "47.00"
#Even though there is strong correlation with age in model, will avoid using age when assessing demographic parity because age might be used as a proxy for race
dsf %>% group_by(maternal_age) %>%
summarise(pos = sum(tested)/n()) %>%
ggplot(data = ., aes(x = maternal_age, y = pos)) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(pos = sum(tested)/n()) %>%
ggplot(data = ., aes(x = maternal_age, y = tested)) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(pos = sum(tested)/n()) %>%
ggplot(data = ., aes(x = maternal_age, y = as.numeric(tested))) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(p_tested = sum(tested)/n()) %>%
ggplot(data = ., aes(x = maternal_age, y = p_tested)) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(p_tested = sum(tested)/n()) %>%
filter(maternal_age > 15 & maternal-age < 45) %>%
ggplot(data = ., aes(x = maternal_age, y = p_tested)) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(p_tested = sum(tested)/n()) %>%
filter(maternal_age > 15 & maternal_age < 45) %>%
ggplot(data = ., aes(x = maternal_age, y = p_tested)) + geom_line()
dsf %>% group_by(maternal_age) %>%
summarise(p_tested = sum(tested)/n()) %>%
filter(maternal_age > 15 & maternal_age < 40) %>%
ggplot(data = ., aes(x = maternal_age, y = p_tested)) + geom_line()
dsf$age_cat <- cut(dsf$maternal_age, breaks = c(12,19,24,29,34,39,49), include.lowest = TRUE)
dsf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n()) %>%
ggplot(data = ., aes(x = age_cat, y = p_tested)) + geom_line()
head(dsf %>% group_by(age_cat) %>% summarise())
head(dsf %>% group_by(age_cat) %>% summarise(count = n()))
dsf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n()) %>%
ggplot(data = ., aes(x = age_cat, y = p_tested)) + geom_line(group = 1)
sf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n(), count = n())
dsf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n(), count = n())
dsf$age_cat <- cut(dsf$maternal_age, breaks = c(12,19,24,29,34,39,45,49), include.lowest = TRUE)
dsf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n(), count = n())
dsf$age_cat <- cut(dsf$maternal_age, breaks = c(12,19,24,29,34,39,44,49), include.lowest = TRUE)
dsf %>% group_by(age_cat) %>%
summarise(p_tested = sum(tested)/n(), count = n())
head(dat)
table(dat$order_indication)
colnames(dat)
head(dat$encounter_id)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
uds_dat
uds_dat <- read.csv("uds_dat.csv")
head(uds_dat)
runApp('app')
colnames(dat)
colSums(dat[,9:54], na.rm = TRUE)
uds_dat
#take number tested to positive test
d <- uds_dat[,c(1,3,4)]
d$prevalence = rep(0.1, 5)
d
check_eo_and_pp <- function(dat, fpr, fnr){
dat$tp = dat[,3]*(1-fpr)
dat$fp = dat[,3]*fpr
dat$tn = (dat[,2]-dat[,3])*(1-fnr)
dat$fn = (dat[,2]-dat[,3])*fnr
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d, 0.1, 0.1)
155/229
280/451
colSums(dat[,9:54], na.rm = TRUE)
d
colnames(uds_dat)
#take number tested to positive test
nonthc <- uds_dat %>% mutate(post_not_thc = Positive.Test - Positive.for.THC.only)
nonthc
#take number tested to positive test
nonthc <- uds_dat %>% mutate(pos_not_thc = Positive.Test - Positive.for.THC.only)
nonthc
d <- uds_dat[,c(1,3,7)]
d <- nonthc[,c(1,3,7)]
d$prevalence = rep(0.1, 5)
check_eo_and_pp(d, 0.1, 0.1)
d
d$prevalence = c(0.1, 0.2, 0.3, 0.4, 0.5)
check_eo_and_pp(d, 0.1, 0.1)
d
nonthc
d <- nonthc[,c(1,2,3,7)]
d
d$prevalence = c(0.1, 0.2, 0.3, 0.4, 0.5)
d
check_eo_and_pp <- function(dat){
dat$fpr = max(0, dat[,4]/dat[,3]-dat$prevalence)
dat$fnr = max(0, (dat[,3]-dat[,4])/dat[,3]-(1-dat$prevalence))
dat$tp = dat[,3]*(1-dat$fpr)
dat$fp = dat[,3]*dat$fpr
dat$tn = (dat[,2]-dat[,3])*(1-fnr)
dat$fn = (dat[,2]-dat[,3])*fnr + (date[,2])
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d)
check_eo_and_pp <- function(dat){
dat$fpr = max(0, dat[,4]/dat[,3]-dat$prevalence)
dat$fnr = max(0, (dat[,3]-dat[,4])/dat[,3]-(1-dat$prevalence))
dat$tp = dat[,3]*(1-dat$fpr)
dat$fp = dat[,3]*dat$fpr
dat$tn = (dat[,2]-dat[,3])*(1-dat$fnr)
dat$fn = (dat[,2]-dat[,3])*dat$fnr + (dat[,2])
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d)
d$prevalence = rep(0.1, 5)
check_eo_and_pp(d)
check_eo_and_pp <- function(dat){
dat$fpr = max(0, dat[,4]/dat[,3]-dat$prevalence)
dat$fnr = max(0, (dat[,2]-dat[,4])/dat[,2]-(1-dat$prevalence))
dat$tp = dat[,3]*(1-dat$fpr)
dat$fp = dat[,3]*dat$fpr
dat$tn = (dat[,2]-dat[,3])*(1-dat$fnr)
dat$fn = (dat[,2]-dat[,3])*dat$fnr + (dat[,2])
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d)
d
check_eo_and_pp <- function(dat, fpr, fnr){
#dat$fpr = max(0, dat[,4]/dat[,3]-dat$prevalence)
#dat$fnr = max(0, (dat[,2]-dat[,4])/dat[,2]-(1-dat$prevalence))
dat$tp = dat[,4]*(1-dat$fpr)
dat$fp = dat[,4]*dat$fpr
dat$tn = (dat[,3]-dat[,4])*(1-dat$fnr)
dat$fn = (dat[,3]-dat[,4])*dat$fnr
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d, 0.05, 0.05)
check_eo_and_pp <- function(dat, fpr, fnr){
#dat$fpr = max(0, dat[,4]/dat[,3]-dat$prevalence)
#dat$fnr = max(0, (dat[,2]-dat[,4])/dat[,2]-(1-dat$prevalence))
dat$tp = dat[,4]*(1-fpr)
dat$fp = dat[,4]*fpr
dat$tn = (dat[,3]-dat[,4])*(1-fnr)
dat$fn = (dat[,3]-dat[,4])*fnr
dat <- dat %>%
mutate(ppv = tp/(tp+fp),
npv = tn/(tn+fn),
sensiviity = tp/(tp + fn),
specificity = tn/(tn + fp))
return(dat)
}
check_eo_and_pp(d, 0.05, 0.05)
154/451
131/229
shiny::runApp('app')
runApp('app')
dat <- read.csv("fairlabs_data.csv")
library(dplyr)
library(ggplot2)
#devtools::install_github("ropensci/plotly")
library(plotly)
library(DT)
source("make_funnelplot.R")
library(shiny)
dat$num_pos <- rep(NA, nrow(dat))
for(i in 1:nrow(dat)){
dat$num_pos[i] <- sum(dat[i,9:54], na.rm = TRUE)
}
# view number of screens positive for each substances
colSums(dat[,9:54], na.rm = TRUE)
ds <- dat %>%
select(mother_id, maternal_race, maternal_age,
uds_collection_date, detected_tetrahydrocannabinol,
num_pos, cps_reporting_date)
nrow(ds) ## 6643
length(unique(dat$mother_id)) #6528
table(ds$uds_collection_date == "")
ds$tested <- ifelse(ds$uds_collection_date == "", FALSE, TRUE)
ds %>% group_by(maternal_race) %>%
summarise(pct_tested = sum(tested)/n(), count = n()) %>%
arrange(desc(count))
# Filter out "other" and mixed race categories to start; while these are critical, sample size is smaller and it will be less straightforward to assess for implicit bias
dsf <- filter(ds, maternal_race %in% c("White", "Black or African American", "Asian", "Other Pacific Islander", "American Indian or Alaska Native")) %>%
#select one row per mother, but if they were ever screened, select that row
arrange(desc(tested)) %>%
group_by(mother_id) %>%
filter(row_number() == 1) %>%
filter(maternal_age < 50)
model <- glm(data = dsf, tested ~ maternal_race + maternal_age)
summary(model)
model <- glm(data = dsf, tested ~ maternal_race + maternal_age + maternal_race*maternal_age)
summary(model)
model <- glm(data = dsf, tested ~ maternal_race*maternal_age)
summary(model)
runApp('app')
shiny::runApp('app')
runApp('app')
dim(uds_dat)
uds_dat <- read.csv("uds_dat.csv")
dim(uds_dat)
uds_dat
sum(uds_dat$Total)
runApp('app')
runApp('app')
